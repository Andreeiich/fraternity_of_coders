
Код на изображении выведет: "Bad: undefined" четыре раза, при этом будет 3-секундная задержка между выводами на консоль. Данный результат такой, потому что функция setTimeout является асинхронной, и к моменту ее выполнения цикл for завершает свое выполнение, при этом значение переменной i равно 4, так как значение массива arr[i] (где i == 4) не определено, то результат будет "Bad: undefined" четыре раза.

Как происходит вывод:

Цикл for выполняется четыре раза,i принимает значения 0,1,2,3.На каждой итерации "setTimeout" вызывается с функцией, которая записывает сообщение на консоль, но "setTimeout" функция асинхронная, т.е. не блокирует выполнение кода в цикле, а выполняет функцию после 3-секундной задержки. К моменту выполнения функции "setTimeout" цикл "for" уже завершился, а значение i равно 4.
Поскольку значение arr[i] (где i == 4) не определено, код регистрирует "Bad: undefined" четыре раза.


1.Для решения данной задачи можно использовать let вместо var, чтобы создать переменную с областью действия блока:

 <script>
const arr = [10, 12, 15, 21];

for (let i = 0; i < arr.length; i++) {
  setTimeout(function() {
    console.log(arr[i] > 13 ? `Good: ${arr[i]}` : `Bad: ${arr[i]}`);
  }, 3000);
}
 </script>

Вывод в одну строку 

const arr = [10, 12, 15, 21];
let results = [];

for (let i = 0; i < arr.length; i++) {
  setTimeout(function(i) {
    results.push(arr[i] > 13 ? `Good: ${arr[i]}` : `Bad: ${arr[i]}`);
    if (results.length === arr.length) {
      console.log(results.join(', '));
    }
  }, 3000, i);
}
     </script>


2.Использовать (IIFE - Immediately Invoked Function Expression)  немедленно вызываемое функциональное выражение для захвата значения i на каждой итерации:

<script>
 const arr = [10, 12, 15, 21];

 for (var i = 0; i < arr.length; i++) {
   (function(i) {
     setTimeout(function() {
      console.log(arr[i] > 13 ? `Good: ${arr[i]}` : `Bad: ${arr[i]}`);
     }, 3000);
   })(i);}

</script>


Вывод в одну строку:


const arr = [10, 12, 15, 21];
 let results = [];
 for (var i = 0; i < arr.length; i++) {
   (function(i) {
     setTimeout(function() {
      results.push(arr[i] > 13 ? `Good: ${arr[i]}` : `Bad: ${arr[i]}`);
    if (results.length === arr.length) {
      console.log(results.join(', '));
    }
     }, 3000);
   })(i);}




